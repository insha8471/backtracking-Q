Time complexity : O(2^n)
Space complexity : O(n)

class Solution {
    
    public void helper(int idx , int[] nums, Map<Integer, Integer> mp,  int k, int[] res){
        if(idx >= nums.length){
            res[0]++;
            return;
        }

        if(!mp.containsKey(nums[idx] + k) && !mp.containsKey(nums[idx] - k)){
            mp.put(nums[idx], mp.getOrDefault(nums[idx], 0)+1);
            helper(idx+1, nums,mp,k,res);
            mp.put(nums[idx], mp.get(nums[idx])-1);

            if(mp.get(nums[idx]) == 0){
                mp.remove(nums[idx]);
            }
        }

        //not take
        helper(idx+1, nums,mp,k, res);
    }
    public int beautifulSubsets(int[] nums, int k) {
        int n =nums.length;
        Map<Integer, Integer> mp = new HashMap<>();
        int[] res = new int[1]; 
        helper(0,nums,mp,k,res);

        return (res[0] - 1);
    }
}
