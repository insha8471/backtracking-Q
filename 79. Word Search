Time complexity : O(n * m * 4^l)  where n and m are the dimensions of the board and l is the length of the word being searched for.

class Solution {
    int l, n , m;
    int[][] direction = {{0,1}, {0,-1} , {1, 0}, {-1, 0}};
    public boolean find(char[][] board, int i, int j, String word, int idx){
        if(idx >= l){
            return true;
        }

        if(i<0 || j<0 || i >= n || j >= m || board[i][j] != word.charAt(idx)){
            return false;
        }

        char temp = board[i][j];
        board[i][j] = '$';

        for(int[] dir : direction){
            int new_i = i+dir[0];
            int new_j = j+dir[1];

            if(find(board, new_i , new_j , word , idx+1)){
                return true;
            }
        }

        board[i][j] = temp;
        return false;
    }
    public boolean exist(char[][] board, String word) {
        n = board.length;
        m = board[0].length;
        l = word.length();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == word.charAt(0) && find(board, i , j , word, 0)){
                    return true;
                }
            }
        }
        return false;
    }
}
