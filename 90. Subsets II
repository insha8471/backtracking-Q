Approach : Using set
Time complexity : O(2^n*log(k))
Space complexity : O(x*k)

class Solution {
    Set<List<Integer>> st = new HashSet<>();
    public void helper(int idx, int[] nums, List<List<Integer>> res, List<Integer> ls){
        if(idx >= nums.length){
            if(!st.contains(ls)){
                res.add(new ArrayList<>(ls));
            }
            st.add(new ArrayList<>(ls));
            return;
        }

        ls.add(nums[idx]);
        //take
        helper(idx+1, nums, res, ls);
        ls.remove(ls.size()-1);
        helper(idx+1, nums, res,ls);
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        helper(0,nums,result, new ArrayList<>());
        return result;
    }
}

*******************************************************************************************************************
Optimal Approach 
Time complexity : O(2^n * n)
Space complexity : O(2^n * k)

class Solution {
    public void helper(int idx, int[] nums, List<List<Integer>> res, List<Integer> ls){
        res.add(new ArrayList<>(ls));
        for(int i=idx;i<nums.length;i++){
            if(i != idx && nums[i] == nums[i-1]) continue;

            ls.add(nums[i]);
            helper(i+1,nums, res, ls);
            ls.remove(ls.size()-1);
        }
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        helper(0,nums,result, new ArrayList<>());
        return result;
    }
}
