Time complexity : O(2^n * k * n/2)
Space complexity : O(k*x)

class Solution {
    public boolean checkPali(int i, int j, String s){
        while(i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    public void helper(int idx, String s, List<List<String>> res, List<String> ls){
        if(idx >= s.length()){
            res.add(new ArrayList<>(ls));
            return;
        }

        for(int i=idx;i<s.length();i++){
            if(checkPali(idx,i, s)){
                ls.add(s.substring(idx,i+1));
                helper(i+1,s, res, ls);
                ls.remove(ls.size()-1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        helper(0,s,res,new ArrayList<>());
        return res;
    }
}
