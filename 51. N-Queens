Time complexity : O(n! * n)
space complextiy : O(n^2)


class Solution {
    static void dfs(int row, char[][] board, List < List < String >> res) {
        if (row == board.length) {
            res.add(construct(board));
            return;
        }

        for (int col = 0; col < board.length; col++) {
            if (validate(board, row, col)) {
                board[row][col] = 'Q';
                dfs(row + 1, board, res);
                board[row][col] = '.';
            }
        }
    }

    static boolean validate(char[][] board, int row, int col) {
        int duprow = row;
        int dupcol = col;
        while (row >= 0 && col >= 0) {
            if (board[row][col] == 'Q') return false;
            row--;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (row >= 0) {
            if (board[row][col] == 'Q') return false;
            row--;
        }

        row = duprow;
        col = dupcol;
        while (row >= 0 && col < board[0].length) {
            if (board[row][col] == 'Q') return false;
            col++;
            row--;
        }
        return true;
    }

     static List < String > construct(char[][] board) {
        List < String > res = new LinkedList < String > ();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();

        char[][] board = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        dfs(0,board, res);
        return res;
    }
}



*********************************************************
Approach 2 : 

class Solution {
    static void dfs(int col, char[][] board, List<List<String>> res, int[] lRow, int[] uDiag, int[] lDiag, int n) {
        if (col == board.length) {
            res.add(construct(board));
            return;
        }

        for (int row = 0; row < board.length; row++) {
            if (lRow[row] == 0 && uDiag[row+col] == 0 && lDiag[(n-1) + (col-row)] == 0){
                board[row][col] = 'Q';
                lRow[row] = 1; 
                uDiag[row+col] = 1;
                lDiag[(n-1) + (col-row)] = 1;
                dfs(col+1,board,res,lRow,uDiag, lDiag, n);
                lRow[row] = 0; 
                uDiag[row+col] = 0;
                lDiag[(n-1) + (col-row)] = 0;
                board[row][col] = '.';
            }
        }
    }

     static List < String > construct(char[][] board) {
        List < String > res = new LinkedList < String > ();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();

        char[][] board = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }

        int[] leftRow = new int[n];
        int[] upperDiag = new int[2*n-1];
        int[] lowerDiag = new int[2*n-1];
        dfs(0,board, res, leftRow, upperDiag, lowerDiag, n);
        return res;
    }
}
