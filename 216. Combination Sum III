Approach 1 

class Solution {
    public void helper(int num, int k, int sum, List<List<Integer>> res, List<Integer> ls){
        if(k==0 && sum == 0){
            res.add(new ArrayList<>(ls));
            return;
        }

        if(num > 9 || sum < 0){
            return;
        }

        ls.add(num);
        helper(num+1,k-1, sum-num, res,ls);
        ls.remove(ls.size()-1);
        helper(num+1, k , sum , res , ls);
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();

        helper(1,k,n,res,new ArrayList<>());
        return res;
    }
}


Approach 2.

class Solution {
    public void helper(int num, int k, int sum, List<List<Integer>> res, List<Integer> ls){
        if(k==0 && sum == 0){
            res.add(new ArrayList<>(ls));
            return;
        }
        
        for(int i=num;i<=9;i++){
            ls.add(i);
            helper(i+1,k-1, sum-i, res,ls);
            ls.remove(ls.size()-1);
        }
        
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();

        helper(1,k,n,res,new ArrayList<>());
        return res;
    }
}
